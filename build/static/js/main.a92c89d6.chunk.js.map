{"version":3,"sources":["components/Score.js","card-constants.js","components/Card.js","components/Board.js","helpers/getRandomInt.js","helpers/randomizeArray.js","components/GameOver.js","components/NewGame.js","App.js","index.js"],"names":["Score","props","score","react_default","a","createElement","CARD_DATA","name","front","CARD_STATE","FACEUP","FACEDOWN","MATCHED","CARD_IMG","BACK","BLANK","Card","id","flipCardClickHandler","imgSrc","status","disableFlip","shouldFlip","src","className","alt","onClick","event","undefined","Board","cards","map","card","index","Card_Card","key","toString","showingImg","getRandomInt","max","Math","floor","random","randomizeArray","num","results","tempArray","i","push","length","splice","GameOver","NewGame","Button","variant","makeCards","data","concat","nanoid","frontImg","backImg","blankImg","App","_useState","useState","_useState2","Object","slicedToArray","appKey","_useState3","_useState4","setDisableFlip","_useState5","_useState6","gameOver","setGameOver","flipCardDown","updatedCards","objectSpread2","setCards","_useState7","_useState8","console","log","_useState9","_useState10","setScore","useEffect","selectedCards","filter","setTimeout","checkMatch","matchCards","every","currentValue","components_Score","Board_Board","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a92c89d6.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Score = (props) => {\n  const { score } = props;\n  return <h2>Matches: {score}</h2>;\n};\n\nexport default Score;\n","export const CARD_DATA = [\n  {\n    name: \"suzuki\",\n    front: \"images/Suzuki.png\",\n  },\n  {\n    name: \"yamaha\",\n    front: \"images/Yamaha.png\",\n  },\n  {\n    name: \"Mt10\",\n    front: \"images/Mt10.png\",\n  },\n  {\n    name: \"jeep\",\n    front: \"images/Jeep.png\",\n  },\n  {\n    name: \"mustang\",\n    front: \"images/Mustang.png\",\n  },\n  {\n    name: \"350z\",\n    front: \"images/350z.png\",\n  },\n  {\n    name: \"suzuki\",\n    front: \"images/Suzuki.png\",\n  },\n  {\n    name: \"yamaha\",\n    front: \"images/Yamaha.png\",\n  },\n  {\n    name: \"Mt10\",\n    front: \"images/Mt10.png\",\n  },\n  {\n    name: \"jeep\",\n    front: \"images/Jeep.png\",\n  },\n  {\n    name: \"mustang\",\n    front: \"images/Mustang.png\",\n  },\n  {\n    name: \"350z\",\n    front: \"images/350z.png\",\n  },\n];\n\nexport const CARD_STATE = {\n  FACEUP: \"face up\",\n  FACEDOWN: \"face down\",\n  MATCHED: \"matched\",\n};\n\nexport const CARD_IMG = {\n  BACK: \"images/back.png\",\n  BLANK: \"images/blank.png\",\n};\n","import React from \"react\";\nimport \"./card.css\";\nimport { CARD_STATE } from \"../card-constants.js\";\n\nconst Card = (props) => {\n  const { id, flipCardClickHandler, imgSrc, status, disableFlip } = props;\n  const shouldFlip = status === CARD_STATE.FACEDOWN && disableFlip === false;\n\n  return (\n    <img\n      src={imgSrc}\n      className=\"card-container\"\n      alt=\"\"\n      onClick={\n        shouldFlip ? (event) => flipCardClickHandler(event, id) : undefined\n      }\n    />\n  );\n};\n\nexport { Card };\n","import React from \"react\";\nimport { Card } from \"./Card.js\";\nimport \"./board.css\";\n\nconst Board = (props) => {\n  const { cards, flipCardClickHandler, disableFlip } = props;\n\n  return (\n    <section id=\"board\">\n      {cards.map((card, index) => {\n        return (\n          <Card\n            key={index.toString()}\n            id={card.id}\n            imgSrc={card.showingImg}\n            flipCardClickHandler={flipCardClickHandler}\n            status={card.status}\n            disableFlip={disableFlip}\n          />\n        );\n      })}\n    </section>\n  );\n};\n\nexport { Board };\n","// random int function\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport default getRandomInt;\n","import getRandomInt from \"./getRandomInt\";\n\n// randomize array\nconst randomizeArray = (num) => {\n  let results = [];\n  let tempArray = [];\n  // generate an array of number from 0 to num -1\n  for (let i = 0; i < num; i++) {\n    tempArray.push(i);\n  }\n  // need to use numbCards -1 and include 0 to create\n  // a random array of numbers\n  while (results.length < num) {\n    results.push(tempArray.splice(getRandomInt(tempArray.length), 1)[0]);\n  }\n\n  return results;\n};\n\nexport default randomizeArray;\n","import React from \"react\";\n\nexport default () => {\n  return <h2>Game over!</h2>;\n};\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\n\nexport default () => {\n  return <Button variant=\"outline-success\">New Game</Button>;\n};\n","import React, { useState, useEffect } from \"react\";\nimport Score from \"./components/Score\";\nimport { Board } from \"./components/Board\";\nimport \"./styles.css\";\nimport { CARD_STATE, CARD_DATA, CARD_IMG } from \"./card-constants\";\nimport { nanoid } from \"nanoid\";\nimport randomizeArray from \"./helpers/randomizeArray\";\nimport GameOver from \"./components/GameOver\";\nimport NewGame from \"./components/NewGame\";\nimport Button from \"react-bootstrap/Button\";\n\n// makes number of cards passed in. Returns <Card /> component\nconst makeCards = (data) => {\n  let randomArray = randomizeArray(data.length);\n\n  let results = randomArray.map((index) => {\n    return {\n      id: `card-${nanoid()}`,\n      name: data[index].name,\n      frontImg: data[index].front,\n      backImg: CARD_IMG.BACK,\n      blankImg: CARD_IMG.BLANK,\n      showingImg: CARD_IMG.BACK,\n      status: CARD_STATE.FACEDOWN,\n    };\n  });\n\n  return results;\n};\n\nexport default function App() {\n  const [appKey, setAppKey] = useState(0);\n  const [disableFlip, setDisableFlip] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n\n  // New code\n  const flipCardClickHandler = (event, id) => {\n    let updatedCards = cards.map((card) => {\n      if (card.id === id) {\n        return {\n          ...card,\n          status: CARD_STATE.FACEUP,\n          showingImg: card.frontImg,\n        };\n      }\n      return card;\n    });\n\n    setCards(updatedCards);\n  };\n\n  const flipCardDown = () => {\n    let updatedCards = cards.map((card) => {\n      if (card.status === CARD_STATE.FACEUP) {\n        return {\n          ...card,\n          status: CARD_STATE.FACEDOWN,\n          showingImg: CARD_IMG.BACK,\n        };\n      }\n      return card;\n    });\n    setCards(updatedCards);\n  };\n\n  const matchCards = () => {\n    let updatedCards = cards.map((card) => {\n      if (card.status === CARD_STATE.FACEUP) {\n        return {\n          ...card,\n          status: CARD_STATE.MATCHED,\n          showingImg: CARD_IMG.BLANK,\n        };\n      }\n      return card;\n    });\n\n    setCards(updatedCards);\n  };\n\n  const [cards, setCards] = useState(makeCards(CARD_DATA));\n\n  console.log(\"cards\", cards);\n\n  const [score, setScore] = useState(0);\n\n  const checkMatch = (selectedCards) => {\n    return selectedCards[0].name === selectedCards[1].name;\n  };\n\n  useEffect(() => {\n    let selectedCards = cards.filter(\n      (card) => card.status === CARD_STATE.FACEUP\n    );\n\n    if (selectedCards.length === 2) {\n      setDisableFlip(true);\n      console.log(selectedCards);\n      setTimeout(() => {\n        if (checkMatch(selectedCards) === false) {\n          flipCardDown();\n        } else {\n          matchCards();\n        }\n        selectedCards = [];\n        setDisableFlip(false);\n      }, 500);\n    }\n  }, [cards, flipCardDown]);\n\n  useEffect(() => {\n    setScore(\n      cards.filter((card) => card.status === CARD_STATE.MATCHED).length / 2\n    );\n  }, [cards]);\n\n  useEffect(() => {\n    const matches = (currentValue) =>\n      currentValue.status === CARD_STATE.MATCHED;\n    if (cards.every(matches)) {\n      setGameOver(true);\n    }\n  }, [cards]);\n\n  return (\n    <div className=\"App\" key={appKey}>\n      <h1>Memory Game</h1>\n\n      <Score score={score} />\n      {gameOver ? <GameOver /> : \"\"}\n      <NewGame />\n      <Board\n        cards={cards}\n        flipCardClickHandler={flipCardClickHandler}\n        disableFlip={disableFlip}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}